{"version":3,"sources":["webpack://SoundFont/webpack/universalModuleDefinition","webpack://SoundFont/webpack/bootstrap","webpack://SoundFont/./src/reverb.js"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AACA;AACO;AACP;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,cAAc;AACd;AACA;AACA,eAAe,aAAa;AAC5B;AACA,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB;AACA,eAAe,cAAc;AAC7B;AACA,eAAe,iBAAiB;AAChC;;AAEA;;AAEA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,iBAAiB;AAChC;AACA,eAAe,OAAO;AACtB;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,OAAO;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,gBAAgB;AAC/B;AACA,eAAe,gBAAgB;AAC/B;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEe,qE","file":"reverb.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SoundFont\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SoundFont\"] = factory();\n\telse\n\t\troot[\"SoundFont\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/reverb.js\");\n","/**\n * Adapted from https://github.com/web-audio-components/simple-reverb\n */\nexport class Reverb {\n  /** Add reverb effect.\n   * @param {AudioContext} ctx\n   * @param {{\n   *   cutOff: (number|undefined),\n   *   decay: (number|undefined),\n   *   delay: (number|undefined),\n   *   filterType: (string|undefined),\n   *   mix: (number|undefined),\n   *   reverse: (boolean|undefined),\n   *   time: (number|undefined)\n   * }} options\n   * @constructor\n   * @return {GainNode}\n   */\n  constructor(ctx, options) {\n    /** @type {AudioContext} */\n    this.ctx = ctx;\n    /** @type {GainNode} */\n    this.wetGainNode = this.ctx.createGain();\n    /** @type {GainNode} */\n    this.dryGainNode = this.ctx.createGain();\n    /** @type {ConvolverNode} */\n    this.node = this.ctx.createConvolver();\n    /** @type {BiquadFilterNode} */\n    this.filterNode = this.ctx.createBiquadFilter();\n\n    // デフォルト値\n\n    /** @type {number} */\n    this._cutOff = 440;\n    /** @type {number} */\n    this._decay = 1;\n    /** @type {number} */\n    this._delay = 0.5;\n    /** @type {BiquadFilterType} */\n    this._filterType = 'bandpass';\n    /** @type {number} */\n    this._mix = 0.5;\n    /** @type {boolean} */\n    this._reverse = false;\n    /** @type {number} */\n    this._time = 1;\n\n    // 入力値と初期値をマージする\n    for (var key in options) {\n      if (options[key] !== undefined) {\n        this['_' + key] = options[key];\n      }\n    }\n\n    // エフェクタに反映\n    this.mix(this._mix);\n    this.filterType(this._filterType);\n    this.cutOff(this._cutOff);\n    // インパルス応答を生成\n    this.BuildImpulse();\n\n    // エフェクトのかかり方の接続\n    this.node.connect(this.dryGainNode);\n    this.node.connect(this.wetGainNode);\n    // エフェクトを接続\n    this.node.connect(this.filterNode);\n    this.dryGainNode.connect(this.node);\n    this.wetGainNode.connect(this.node);\n    // フィルタを接続\n    this.filterNode.connect(this.node);\n  };\n\n  /**\n   * Utility function for building an impulse response\n   * from the module parameters.\n   * @return {AudioBuffer}\n   */\n  BuildImpulse() {\n    /** @type {number} */\n    const rate = this.ctx.sampleRate;\n    /** @type {number} */\n    const length = Math.max(rate * this._time, 1);\n    /** @type {number} */\n    const delayDuration = rate * this._delay;\n    /** @type {AudioBuffer} */\n    let impulse = this.ctx.createBuffer(2, length, rate);\n    /** @type {ArrayBufferView} */\n    let impulseL = new Float32Array(length);\n    /** @type {ArrayBufferView} */\n    let impulseR = new Float32Array(length);\n\n    for (var i = 0; i < length; i++) {\n      let n = void 0,\n        pow = void 0;\n      if (i < delayDuration) {\n        // Delay Effect\n        impulseL[i] = 0;\n        impulseR[i] = 0;\n      } else {\n        n = this._reverse ? length - (i - delayDuration) : i - delayDuration;\n        n = this._reverse ? length - i : i;\n        pow = Math.pow(1 - n / length, this._decay);\n        impulseL[i] = (Math.random() * 2 - 1) * pow;\n        impulseR[i] = (Math.random() * 2 - 1) * pow;\n      }\n      n = this._reverse ? length - (i - delayDuration) : i - delayDuration;\n      pow = Math.pow(1 - n / length, this._decay);\n      impulseL[i] = (Math.random() * 2 - 1) * pow;\n      impulseR[i] = (Math.random() * 2 - 1) * pow;\n    }\n\n    impulse.getChannelData(0).set(impulseL);\n    impulse.getChannelData(1).set(impulseR);\n\n    this.node.buffer = impulse;\n  }\n\n  /** @param {number} mix */\n  mix(mix) {\n    this._mix = mix;\n    this.dryGainNode.gain.setTargetAtTime(this.getDryLevel(mix) / 127, this.ctx.currentTime, 0.015);\n    this.wetGainNode.gain.setTargetAtTime(this.getWetLevel(mix) / 127, this.ctx.currentTime, 0.015);\n  }\n\n  /** @param {number} time */\n  time(time) {\n    this._time = time;\n    this.BuildImpulse();\n  }\n\n  /** \n   * Impulse response decay rate.\n   * @param {number} decay\n   */\n  decay(decay) {\n    this._decay = decay;\n    this.BuildImpulse();\n  }\n\n  /** \n   * Impulse response decay rate.\n   * @param {number} delay\n   */\n  delay(delay) {\n    this._delay = delay;\n    this.BuildImpulse();\n  }\n\n  /**\n   * Reverse the impulse response.\n   * @param {boolean} reverse\n   */\n  reverse(reverse) {\n    this._reverse = reverse;\n    this.BuildImpulse();\n  }\n\n  /**\n   * Cut off frequency.\n   * @param {number} freq\n   */\n  cutOff(freq) {\n    this._cutOff = freq;\n    this.filterNode.frequency.setTargetAtTime(this._cutOff, this.ctx.currentTime, 0.015);\n  }\n\n  /**\n   * Filter Type.\n   * @param {BiquadFilterType} type\n   */\n  filterType(type) {\n    this.filterNode.type = this._filterType = type;\n  }\n\n  /**\n   * @param {number} value\n   * @return {number}\n   */\n  getDryLevel(value) {\n    if (value > 1 || value < 0) {\n      return 0;\n    }\n\n    if (value <= 0.5)\n      return 1;\n\n    return 1 - ((value - 0.5) * 2);\n  }\n\n  /**\n   * @param {number} value\n   * @return {number}\n   */\n  getWetLevel(value) {\n    if (value > 1 || value < 0) {\n      return 0;\n    }\n\n    if (value >= 0.5)\n      return 1;\n\n    return 1 - ((value - 0.5) * 2);\n  }\n\n}\n\nexport default Reverb"],"sourceRoot":""}
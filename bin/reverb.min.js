/*! sf2synth.js | imaya / GREE Inc. / Logue | license: MIT */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("SoundFont",[],t):"object"==typeof exports?exports.SoundFont=t():e.SoundFont=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=1)}([,function(e,t,i){"use strict";i.r(t),i.d(t,"Reverb",function(){return r});class r{constructor(e,t){for(var i in this.ctx=e,this.wetGainNode=this.ctx.createGain(),this.dryGainNode=this.ctx.createGain(),this.node=this.ctx.createConvolver(),this.filterNode=this.ctx.createBiquadFilter(),this._cutOff=440,this._decay=1,this._delay=.5,this._filterType="bandpass",this._mix=.5,this._reverse=!1,this._time=1,t)void 0!==t[i]&&(this["_"+i]=t[i]);this.mix(this._mix),this.filterType(this._filterType),this.cutOff(this._cutOff),this.BuildImpulse(),this.node.connect(this.dryGainNode),this.node.connect(this.wetGainNode),this.node.connect(this.filterNode),this.dryGainNode.connect(this.node),this.wetGainNode.connect(this.node),this.filterNode.connect(this.node)}BuildImpulse(){const e=this.ctx.sampleRate,t=Math.max(e*this._time,1),i=e*this._delay;let r=this.ctx.createBuffer(2,t,e),n=new Float32Array(t),s=new Float32Array(t);for(var o=0;o<t;o++){let e=void 0,r=void 0;o<i?(n[o]=0,s[o]=0):(e=this._reverse?t-(o-i):o-i,e=this._reverse?t-o:o,r=Math.pow(1-e/t,this._decay),n[o]=(2*Math.random()-1)*r,s[o]=(2*Math.random()-1)*r),e=this._reverse?t-(o-i):o-i,r=Math.pow(1-e/t,this._decay),n[o]=(2*Math.random()-1)*r,s[o]=(2*Math.random()-1)*r}r.getChannelData(0).set(n),r.getChannelData(1).set(s),this.node.buffer=r}mix(e){this._mix=e,this.dryGainNode.gain.setTargetAtTime(this.getDryLevel(e)/127,this.ctx.currentTime,.015),this.wetGainNode.gain.setTargetAtTime(this.getWetLevel(e)/127,this.ctx.currentTime,.015)}time(e){this._time=e,this.BuildImpulse()}decay(e){this._decay=e,this.BuildImpulse()}delay(e){this._delay=e,this.BuildImpulse()}reverse(e){this._reverse=e,this.BuildImpulse()}cutOff(e){this._cutOff=e,this.filterNode.frequency.setTargetAtTime(this._cutOff,this.ctx.currentTime,.015)}filterType(e){this.filterNode.type=this._filterType=e}getDryLevel(e){return e>1||e<0?0:e<=.5?1:1-2*(e-.5)}getWetLevel(e){return e>1||e<0?0:e>=.5?1:1-2*(e-.5)}}t.default=r}])});